{"ast":null,"code":"// This function expects a JS object as an argument\n// The object should contain the following properties\n// - initialInvestment: The initial investment amount\n// - annualInvestment: The amount invested every year\n// - expectedReturn: The expected (annual) rate of return\n// - duration: The investment duration (time frame)\nexport function calculateInvestmentResults({\n  initialInvestment,\n  annualInvestment,\n  expectedReturn,\n  duration\n}) {\n  const annualData = [];\n  let investmentValue = initialInvestment;\n  for (let i = 0; i < duration; i++) {\n    const interestEarnedInYear = investmentValue * (expectedReturn / 100);\n    investmentValue += interestEarnedInYear + annualInvestment;\n    annualData.push({\n      year: i + 1,\n      // year identifier\n      interest: interestEarnedInYear,\n      // the amount of interest earned in this year\n      valueEndOfYear: investmentValue,\n      // investment value at end of year\n      annualInvestment: annualInvestment // investment added in this year\n    });\n  }\n  return annualData;\n}\n\n// The browser-provided Intl API is used to prepare a formatter object\n// This object offers a \"format()\" method that can be used to format numbers as currency\n// Example Usage: formatter.format(1000) => yields \"$1,000\"\nexport const formatter = new Intl.NumberFormat(\"en-US\", {\n  style: \"currency\",\n  currency: \"USD\",\n  minimumFractionDigits: 0,\n  maximumFractionDigits: 0\n});","map":{"version":3,"names":["calculateInvestmentResults","initialInvestment","annualInvestment","expectedReturn","duration","annualData","investmentValue","i","interestEarnedInYear","push","year","interest","valueEndOfYear","formatter","Intl","NumberFormat","style","currency","minimumFractionDigits","maximumFractionDigits"],"sources":["/Users/sribalaji/Files/Work/reactJs/React.js-LearnHub/investment-calculator/src/util/investment.js"],"sourcesContent":["// This function expects a JS object as an argument\n// The object should contain the following properties\n// - initialInvestment: The initial investment amount\n// - annualInvestment: The amount invested every year\n// - expectedReturn: The expected (annual) rate of return\n// - duration: The investment duration (time frame)\nexport function calculateInvestmentResults({\n  initialInvestment,\n  annualInvestment,\n  expectedReturn,\n  duration\n}) {\n  const annualData = [];\n  let investmentValue = initialInvestment;\n\n  for (let i = 0; i < duration; i++) {\n    const interestEarnedInYear = investmentValue * (expectedReturn / 100);\n    investmentValue += interestEarnedInYear + annualInvestment;\n    annualData.push({\n      year: i + 1, // year identifier\n      interest: interestEarnedInYear, // the amount of interest earned in this year\n      valueEndOfYear: investmentValue, // investment value at end of year\n      annualInvestment: annualInvestment // investment added in this year\n    });\n  }\n\n  return annualData;\n}\n\n// The browser-provided Intl API is used to prepare a formatter object\n// This object offers a \"format()\" method that can be used to format numbers as currency\n// Example Usage: formatter.format(1000) => yields \"$1,000\"\nexport const formatter = new Intl.NumberFormat(\"en-US\", {\n  style: \"currency\",\n  currency: \"USD\",\n  minimumFractionDigits: 0,\n  maximumFractionDigits: 0\n});\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,0BAA0BA,CAAC;EACzCC,iBAAiB;EACjBC,gBAAgB;EAChBC,cAAc;EACdC;AACF,CAAC,EAAE;EACD,MAAMC,UAAU,GAAG,EAAE;EACrB,IAAIC,eAAe,GAAGL,iBAAiB;EAEvC,KAAK,IAAIM,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,QAAQ,EAAEG,CAAC,EAAE,EAAE;IACjC,MAAMC,oBAAoB,GAAGF,eAAe,IAAIH,cAAc,GAAG,GAAG,CAAC;IACrEG,eAAe,IAAIE,oBAAoB,GAAGN,gBAAgB;IAC1DG,UAAU,CAACI,IAAI,CAAC;MACdC,IAAI,EAAEH,CAAC,GAAG,CAAC;MAAE;MACbI,QAAQ,EAAEH,oBAAoB;MAAE;MAChCI,cAAc,EAAEN,eAAe;MAAE;MACjCJ,gBAAgB,EAAEA,gBAAgB,CAAC;IACrC,CAAC,CAAC;EACJ;EAEA,OAAOG,UAAU;AACnB;;AAEA;AACA;AACA;AACA,OAAO,MAAMQ,SAAS,GAAG,IAAIC,IAAI,CAACC,YAAY,CAAC,OAAO,EAAE;EACtDC,KAAK,EAAE,UAAU;EACjBC,QAAQ,EAAE,KAAK;EACfC,qBAAqB,EAAE,CAAC;EACxBC,qBAAqB,EAAE;AACzB,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}